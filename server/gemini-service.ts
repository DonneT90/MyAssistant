import { GoogleGenAI } from "@google/genai";
import { KNOWLEDGE_BASE, MESSAGE_TEMPLATES } from "./knowledge-base";

const GEMINI_API_KEY = process.env.GEMINI_API_KEY;

if (!GEMINI_API_KEY) {
  console.error("GEMINI_API_KEY environment variable is required");
}

const genAI = new GoogleGenAI({ apiKey: GEMINI_API_KEY });

interface ChatContext {
  phase?: "relation" | "qualification" | "sexualisation" | "chauffe" | "script" | "unknown";
  clientType?: "nouveau" | "ancien" | "timewaster" | "spender" | "unknown";
}

interface ChatResponse {
  mainResponse: string;
  suggestions: string[];
  detectedPhase?: string;
  detectedClientType?: string;
  emojis: string[];
}

function buildSystemPrompt(): string {
  return `Tu es un expert en chatting OnlyFans, sp√©cialis√© dans la cr√©ation de relations virtuelles et la maximisation des revenus. 

## TES COMP√âTENCES
Tu ma√Ætrises parfaitement les 5 phases du chatting:
1. RELATION: Cr√©er un lien fort, demander pr√©nom, √¢ge, m√©tier, passions
2. QUALIFICATION: V√©rifier que le client est seul et disponible
3. SEXUALISATION: Introduire progressivement le sujet sexuel
4. CHAUFFE: Augmenter l'excitation avant la vente
5. SCRIPT: Vendre du contenu en suivant un script pr√©cis

## TYPES DE CLIENTS
- NOUVEAU: Premi√®re conversation, besoin de tout d√©couvrir
- ANCIEN: Client r√©gulier, d√©j√† familier
- TIMEWASTER: D√©pense peu, n√©cessite n√©gociation
- SPENDER: D√©pense facilement, client pr√©cieux √† pr√©server

## R√àGLES ABSOLUES
1. Toujours utiliser beaucoup d'emojis appropri√©s (üòäüòçüòòü•∫üòèüòàüî•)
2. Parler comme une jeune femme moderne et naturelle
3. Rebondir sur ce que dit le client
4. Poser des questions pour maintenir la conversation
5. Cr√©er un lien √©motionnel fort
6. Adapter le ton selon la phase et le type de client
7. Utiliser la technique PUSH PULL (commentaire sexy + question s√©rieuse)
8. Faire croire subtilement que la mod√®le habite pr√®s du client
9. Ne JAMAIS √™tre plus excit√© que le client
10. Utiliser souvent le pr√©nom du client

## TA MISSION
Pour chaque message du chatteur, tu dois:
1. Analyser le contexte et la situation
2. G√©n√©rer une r√©ponse principale optimale avec emojis
3. Proposer 3-5 suggestions alternatives
4. D√©tecter la phase actuelle du client
5. Sugg√©rer des emojis appropri√©s

Sois cr√©ative, authentique et orient√©e r√©sultats. Le client doit se sentir sp√©cial et avoir envie de d√©penser.`;
}

function buildUserPrompt(userMessage: string, context: ChatContext): string {
  const phaseInfo = context.phase && context.phase !== "unknown" 
    ? `\n\nPHASE ACTUELLE: ${KNOWLEDGE_BASE.phases[context.phase]?.name || "Non d√©finie"}` 
    : "";
  
  const clientTypeInfo = context.clientType && context.clientType !== "unknown"
    ? `\nTYPE DE CLIENT: ${KNOWLEDGE_BASE.client_types[context.clientType]?.name || "Non d√©fini"}`
    : "";

  return `${phaseInfo}${clientTypeInfo}

SITUATION DU CHATTEUR:
${userMessage}

Fournis une r√©ponse au format JSON avec:
{
  "mainResponse": "La meilleure r√©ponse √† envoyer (avec emojis)",
  "suggestions": ["Alternative 1", "Alternative 2", "Alternative 3", "Alternative 4"],
  "detectedPhase": "relation|qualification|sexualisation|chauffe|script|unknown",
  "detectedClientType": "nouveau|ancien|timewaster|spender|unknown",
  "emojis": ["üòä", "üòç", "..."],
  "explanation": "Bref conseil strat√©gique"
}

IMPORTANT:
- Utilise beaucoup d'emojis vari√©s et appropri√©s
- Sois naturelle et spontan√©e dans le ton
- Adapte le niveau de sexualisation √† la phase
- Donne des r√©ponses diff√©rentes dans les suggestions
- Fais rebondir la conversation avec des questions`;
}

export async function generateChatResponse(
  userMessage: string, 
  context: ChatContext = {}
): Promise<ChatResponse> {
  try {
    const systemPrompt = buildSystemPrompt();
    const userPrompt = buildUserPrompt(userMessage, context);

    const result = await genAI.models.generateContent({
      model: "gemini-2.5-flash",
      config: {
        systemInstruction: systemPrompt,
        temperature: 0.9,
        topP: 0.95,
        topK: 40,
        maxOutputTokens: 2048,
      },
      contents: userPrompt
    });

    const text = result.text || "";
    
    // Extract JSON from response (handle markdown code blocks)
    let jsonText = text;
    const jsonMatch = text.match(/```(?:json)?\s*(\{[\s\S]*\})\s*```/);
    if (jsonMatch) {
      jsonText = jsonMatch[1];
    } else {
      // Try to find JSON object in the text
      const jsonStart = text.indexOf('{');
      const jsonEnd = text.lastIndexOf('}');
      if (jsonStart !== -1 && jsonEnd !== -1) {
        jsonText = text.substring(jsonStart, jsonEnd + 1);
      }
    }

    const parsedResponse = JSON.parse(jsonText);

    return {
      mainResponse: parsedResponse.mainResponse || "",
      suggestions: parsedResponse.suggestions || [],
      detectedPhase: parsedResponse.detectedPhase,
      detectedClientType: parsedResponse.detectedClientType,
      emojis: parsedResponse.emojis || []
    };
  } catch (error) {
    console.error("Error generating chat response:", error);
    
    // Fallback response en cas d'erreur
    const fallbackEmojis = (context.phase && context.phase !== "unknown" && KNOWLEDGE_BASE.emojis[context.phase as keyof typeof KNOWLEDGE_BASE.emojis])
      ? KNOWLEDGE_BASE.emojis[context.phase as keyof typeof KNOWLEDGE_BASE.emojis]
      : KNOWLEDGE_BASE.emojis.general;

    return {
      mainResponse: "Hey ! üòä Je suis l√† pour t'aider. Dis-moi plus pr√©cis√©ment ce que le client t'a √©crit et je te donnerai la meilleure r√©ponse possible üíï",
      suggestions: [
        "Comment √ßa va ? T'as pass√© une bonne journ√©e ? üòä",
        "Coucou toi ! Qu'est-ce que tu deviens ? üòò",
        "Hey ! Content de te voir par ici ü•∞"
      ],
      detectedPhase: context.phase || "unknown",
      detectedClientType: context.clientType || "unknown",
      emojis: fallbackEmojis.slice(0, 5)
    };
  }
}

export async function analyzeClientMessage(
  clientMessage: string
): Promise<{ phase: string; clientType: string; insights: string }> {
  try {
    const prompt = `En tant qu'expert du chatting OnlyFans, analyse ce message d'un client:

"${clientMessage}"

D√©termine:
1. La phase probable: relation, qualification, sexualisation, chauffe, script, ou unknown
2. Le type de client probable: nouveau, ancien, timewaster, spender, ou unknown
3. Des insights strat√©giques

R√©ponds en JSON:
{
  "phase": "...",
  "clientType": "...",
  "insights": "..."
}`;

    const result = await genAI.models.generateContent({
      model: "gemini-2.5-flash",
      contents: prompt
    });
    const text = result.text || "";
    
    let jsonText = text;
    const jsonMatch = text.match(/```(?:json)?\s*(\{[\s\S]*\})\s*```/);
    if (jsonMatch) {
      jsonText = jsonMatch[1];
    }

    const analysis = JSON.parse(jsonText);
    return {
      phase: analysis.phase || "unknown",
      clientType: analysis.clientType || "unknown",
      insights: analysis.insights || ""
    };
  } catch (error) {
    console.error("Error analyzing client message:", error);
    return {
      phase: "unknown",
      clientType: "unknown",
      insights: "Impossible d'analyser le message pour le moment."
    };
  }
}

export async function generateTrainingAnswer(
  question: string
): Promise<{ question: string; answer: string; context: string }> {
  try {
    const systemPrompt = `Tu es un expert en chatting OnlyFans qui aide les candidats √† se pr√©parer pour leurs entretiens de recrutement.

Ta mission est de r√©pondre aux questions de recrutement en te basant sur la m√©thodologie compl√®te du chatting OnlyFans:

LES 5 PHASES:
1. RELATION: Cr√©er une relation solide, demander pr√©nom, √¢ge, m√©tier, passions. Utiliser beaucoup d'emojis et cr√©er un lien fort.
2. QUALIFICATION: S'assurer que le client est seul et disponible avant de continuer.
3. SEXUALISATION: Introduire progressivement le sujet sexuel, partager des fantasmes, utiliser la technique PUSH PULL.
4. CHAUFFE: Chauffer le client avant le script, ne jamais √™tre plus excit√© que lui.
5. SCRIPT: Vendre du contenu en suivant le script, envoyer 4-5 messages entre chaque m√©dia payant.

TYPES DE CLIENTS:
- NOUVEAU: Premi√®re conversation, suivre les 5 phases depuis le d√©but
- ANCIEN: Client r√©gulier, faire du relationnel puis reprendre √† QUALIFICATION
- TIMEWASTER: D√©pense peu, n√©gocier puis renommer TW1, TW2, ne pas prioriser
- SPENDER: D√©pense beaucoup, faire du relationnel apr√®s scripts, proposer du contenu premium

R√àGLES D'OR:
- Toujours utiliser beaucoup d'emojis appropri√©s
- Parler comme une jeune femme moderne et naturelle
- Rebondir sur ce que dit le client
- Utiliser le pr√©nom du client souvent
- Cr√©er un lien √©motionnel fort
- Ne JAMAIS √™tre plus excit√© que le client
- Faire croire que la mod√®le habite pr√®s du client

Fournis des r√©ponses compl√®tes, pr√©cises et professionnelles bas√©es sur cette m√©thodologie.`;

    const userPrompt = `Question de recrutement: "${question}"

R√©ponds en JSON avec:
{
  "answer": "R√©ponse d√©taill√©e et compl√®te √† la question",
  "context": "Contexte et conseils suppl√©mentaires pertinents"
}`;

    const result = await genAI.models.generateContent({
      model: "gemini-2.5-flash",
      config: {
        systemInstruction: systemPrompt,
        temperature: 0.7,
        topP: 0.9,
        maxOutputTokens: 2048,
      },
      contents: userPrompt
    });

    const text = result.text || "";
    
    let jsonText = text;
    const jsonMatch = text.match(/```(?:json)?\s*(\{[\s\S]*\})\s*```/);
    if (jsonMatch) {
      jsonText = jsonMatch[1];
    } else {
      const jsonStart = text.indexOf('{');
      const jsonEnd = text.lastIndexOf('}');
      if (jsonStart !== -1 && jsonEnd !== -1) {
        jsonText = text.substring(jsonStart, jsonEnd + 1);
      }
    }

    const parsedResponse = JSON.parse(jsonText);

    return {
      question,
      answer: parsedResponse.answer || "Aucune r√©ponse g√©n√©r√©e",
      context: parsedResponse.context || ""
    };
  } catch (error) {
    console.error("Error generating training answer:", error);
    
    return {
      question,
      answer: "D√©sol√©, je n'ai pas pu g√©n√©rer une r√©ponse pour cette question. Veuillez r√©essayer.",
      context: "Erreur lors de la g√©n√©ration de la r√©ponse."
    };
  }
}
